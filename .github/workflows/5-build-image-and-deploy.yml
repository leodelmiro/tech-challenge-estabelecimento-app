name: 3 - [ECR] Build Docker Image

on:
  pull_request:
    types:
      - "closed"
    branches:
      - "develop"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Compile
        run: mvn -B compile --file ./pom.xml
      - name: Build a package
        run: mvn -B package --file ./pom.xml
      - name: Temporarily save jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: ${{ github.workspace }}/target/*.jar
          retention-days: 1
  build-image-and-deploy:
    runs-on: ubuntu-latest
    env:
      SECRET_NAME: 'ecrpullsecret'
      ECR_USERNAME: 'AWS'
      ECR_EMAIL: 'leodelmiroms@gmail.com'
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: .
          registry: ${{ steps.login-ecr.outputs.registry }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/fiap-estabelecimento
      - name: Image Created
        id: image-created
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-east-1 --name java_app_cluster
      - name: Check for Kubernetes Secret
        id: check-secret
        run: |
          NAMESPACE=default # specify the namespace

          if kubectl get secret $SECRET_NAME --namespace $NAMESPACE; then
            echo "Secret $SECRET_NAME exists"
            echo "::set-output name=secret_exists::true"
          else
            echo "Secret $SECRET_NAME does not exist"
            DOCKER_SECRET=$(aws ecr --region=us-east-1 get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2)
            echo "Login Result: $DOCKER_SECRET"
            kubectl create secret docker-registry $SECRET_NAME --docker-server=$ECR_URL --docker-username=$ECR_USERNAME --docker-password=$DOCKER_SECRET --docker-email=$ECR_EMAIL
          fi
      - name: Deploy to EKS
        run: |
          kubectl apply -f infra/k8s/namespace.yaml 
          kubectl apply -f infra/k8s/configmap.yaml
          kubectl apply -f infra/k8s/serviceaccount.yaml
          kubectl apply -f infra/k8s/deployment.yaml
          kubectl apply -f infra/k8s/service.yaml
          kubectl apply -f infra/k8s/hpa.yaml
