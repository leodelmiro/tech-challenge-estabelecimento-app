name: 4 - [MAIN] Apply, Build & Deploy

on:
  pull_request:
    types:
      - "closed"
    branches:
      - "main"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SECRET_NAME: 'ecrpullsecret'
      ECR_USERNAME: 'AWS'
      ECR_EMAIL: 'leodelmiroms@gmail.com'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-east-1 --name tech-fiap-app
      - name: Check for Kubernetes Secret
        id: check-secret
        run: |
          NAMESPACE=backend-estabelecimento

          if kubectl get secret $SECRET_NAME --namespace $NAMESPACE; then
            echo "Secret $SECRET_NAME exists"
            echo "::set-output name=secret_exists::true"
          else
            echo "Secret $SECRET_NAME does not exist"
            DOCKER_SECRET=$(aws ecr --region=us-east-1 get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2)
            echo "Login Result: $DOCKER_SECRET"
            kubectl create secret docker-registry $SECRET_NAME --docker-server=$ECR_URL --docker-username=$ECR_USERNAME --docker-password=$DOCKER_SECRET --docker-email=$ECR_EMAIL
          fi
      - name: Deploy to EKS
        run: |
          kubectl apply -f infra/k8s/namespace.yaml 
          kubectl apply -f infra/k8s/configmap.yaml
          kubectl apply -f infra/k8s/serviceaccount.yaml
          kubectl apply -f infra/k8s/deployment.yaml
          kubectl apply -f infra/k8s/service.yaml
          kubectl apply -f infra/k8s/hpa.yaml